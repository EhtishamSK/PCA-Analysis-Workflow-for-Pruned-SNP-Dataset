# Set the working directory to the folder where PLINK and input files are located
folder_path <- "C:/Users/ehtis/OneDrive - New Mexico State University/SUNNY/Research Projects/Fruit Morphology Projects/GWAS/GWAS/PCA"  # Replace with the actual folder path
setwd(folder_path)

# Define the PLINK executable
plink_executable <- "./plink"  # Use './' to specify it is in the current folder

# Run a basic PLINK command to check its version
plink_test_command <- paste(plink_executable, "--version")

# Execute the command
system(plink_test_command)

# Step 0: Convert VCF to PLINK format
system("plink --vcf GENO_VCF.vcf --recode --out GBS97.plk")

# Step 1: Convert PED/MAP files to binary format
system("plink --ped GBS128.plk.ped --map GBS128.plk.map --make-bed --out GBS128.plk")

# Step 2: Perform LD-based marker pruning
# Parameters: 50-SNP window, 5-SNP step, r^2 threshold of 0.2
system("plink --bfile GBS128.plk --make-founders --indep-pairwise 50 5 0.2 --out pruned")

# Step 3: Generate a pruned dataset
system("plink --bfile GBS128.plk --extract pruned.prune.in --make-bed --out GBS128_pruned")

# Step 4: Generate VCF format of the pruned dataset for further analysis
system("plink --bfile GBS128_pruned --recode vcf --out GBS128_pruned_vcf")

# Step 5: Calculate a genetic distance matrix using the pruned dataset
system("plink --allow-no-sex --nonfounders --bfile GBS128_pruned --distance-matrix --out dataForPCA")

# Step 6: Load the distance matrix data
dist_populations <- read.table("dataForPCA.mdist", header = FALSE)

# Extract IDs (famids and individual IDs) from the output
fam <- data.frame(famids = read.table("dataForPCA.mdist.id")[, 1])
famInd <- data.frame(IID = read.table("dataForPCA.mdist.id")[, 2])

# Perform PCA using the cmdscale function 
# This step performs classical multidimensional scaling (PCA)
mds_populations <- cmdscale(dist_populations, eig = TRUE, k = 5)  # k = 5 to extract the first 5 principal components

# Extract the eigenvectors and bind them with the family and individual IDs
eigenvec_populations <- cbind(fam, famInd, mds_populations$points)

# Calculate the proportion of variation captured by each eigenvector
eigen_percent <- round(((mds_populations$eig) / sum(mds_populations$eig)) * 100, 2)

# Print the proportion of variation for each eigenvector
print(eigen_percent)

# Visualize PCA in tidyverse
# Load tidyverse
if (!require("tidyverse")) {
  install.packages("tidyverse", dependencies = TRUE)
  library(tidyverse)
}

# PCA plot with bigger dots and different colors for each cluster (without legend)
ggplot(data = eigenvec_populations) +
  geom_point(mapping = aes(x = `1`, y = `2`, color = as.factor(famids)), 
             size = 3, # Adjust size of the dots (larger)
             show.legend = FALSE) +  # Remove legend for clusters
  geom_hline(yintercept = 0, linetype = "dotted") + 
  geom_vline(xintercept = 0, linetype = "dotted") +
  labs(title = "PCA of Capsicum Association Mapping Population",
       x = paste0("Principal component 1 (", eigen_percent[1], " %)"),
       y = paste0("Principal component 2 (", eigen_percent[2], " %)")) + 
  theme_minimal() + 
  scale_color_discrete(name = "Cluster") # Optional for a legend if you want to re-enable it later

# Save the biplot
ggsave("PCA.png", width = 8, height = 6, dpi = 600, bg = "white")
